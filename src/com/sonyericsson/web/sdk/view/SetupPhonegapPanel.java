/* License (MIT)
 * Copyright 2009 Sony Ericsson Mobile Communications AB
 * website: http://developer.sonyericsson.com/
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * Software), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.sonyericsson.web.sdk.view;

import com.sonyericsson.web.sdk.model.Settings;
import java.awt.Desktop;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.event.HyperlinkEvent;
import org.jdesktop.application.Action;

public class SetupPhonegapPanel extends AbstractPanel {

  /** Creates new form setupPhonegapPanel */
  public SetupPhonegapPanel(Settings settings) {
    initComponents();
    String phonegapPath = settings.getPhonegapPath();
    if(phonegapPath.equals("") || phonegapPath == null)
    {
        phonegapPath = settings.getInstallDirectory()+"/PhoneGap Simulator";
    }
    phonegapBrowseTextField.setText(phonegapPath);
    
    addComponentListener(new ComponentAdapter() {

      @Override
      public void componentShown(ComponentEvent e) {
        System.out.println("downloadPanel.componentShown");
        firePanelChanged();

      }

      @Override
      public void componentHidden(ComponentEvent e) {
      }
    });
  }

  @Override
  public boolean isNextEnabled() {
    String phonegapFolderStr = phonegapBrowseTextField.getText();

    if(phonegapFolderStr != null && phonegapFolderStr.length() != 0)
    {
      File phonegapFolder = new File(phonegapFolderStr);
      String[] phonegapSimulator = phonegapFolder.list(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return (name.endsWith("Simulator") || name.endsWith("Simulator.exe"));
            }
        });
      return phonegapSimulator.length > 0;
    }
    else
        return false;
  }

  @Action
  public void browsePhonegapPath() {
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
    chooser.setSelectedFile(new File(phonegapBrowseTextField.getText()));
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File selectedFolder = chooser.getSelectedFile();
      phonegapBrowseTextField.setText(selectedFolder.getPath());
    }
    firePanelChanged();
  }

  public String getPath() {
    return phonegapBrowseTextField.getText();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        phonegapTopPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        phonegapMainPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        browsePanel = new javax.swing.JPanel();
        phonegapBrowseTextField = new javax.swing.JTextField();
        phonegapBrowseButton = new javax.swing.JButton();
        phonegapBrowseLabel = new javax.swing.JLabel();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(SetupPhonegapPanel.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N
        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        phonegapTopPanel.setBackground(resourceMap.getColor("phonegapTopPanel.background")); // NOI18N
        phonegapTopPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        phonegapTopPanel.setName("phonegapTopPanel"); // NOI18N
        phonegapTopPanel.setOpaque(false);
        phonegapTopPanel.setPreferredSize(new java.awt.Dimension(90, 90));
        phonegapTopPanel.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        phonegapTopPanel.add(jLabel3, java.awt.BorderLayout.LINE_START);

        jLabel2.setName("jLabel2"); // NOI18N
        phonegapTopPanel.add(jLabel2, java.awt.BorderLayout.LINE_END);

        jLabel1.setIcon(resourceMap.getIcon("jLabel1.icon")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        phonegapTopPanel.add(jLabel1, java.awt.BorderLayout.LINE_END);

        add(phonegapTopPanel, java.awt.BorderLayout.PAGE_START);

        phonegapMainPanel.setBackground(resourceMap.getColor("phonegapMainPanel.background")); // NOI18N
        phonegapMainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        phonegapMainPanel.setName("phonegapMainPanel"); // NOI18N
        phonegapMainPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBorder(null);
        jScrollPane2.setName("jScrollPane2"); // NOI18N
        jScrollPane2.setOpaque(false);

        jTextPane2.setBackground(resourceMap.getColor("jTextPane2.background")); // NOI18N
        jTextPane2.setBorder(null);
        jTextPane2.setContentType(resourceMap.getString("jTextPane2.contentType")); // NOI18N
        jTextPane2.setEditable(false);
        jTextPane2.setText(resourceMap.getString("jTextPane2.text")); // NOI18N
        jTextPane2.setFocusable(false);
        jTextPane2.setName("jTextPane2"); // NOI18N
        jTextPane2.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                jTextPane2testHyperlinkListener(evt);
            }
        });
        jScrollPane2.setViewportView(jTextPane2);

        phonegapMainPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        browsePanel.setName("browsePanel"); // NOI18N
        browsePanel.setOpaque(false);
        browsePanel.setLayout(new java.awt.BorderLayout());

        phonegapBrowseTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        phonegapBrowseTextField.setMargin(new java.awt.Insets(0, 0, 0, 0));
        phonegapBrowseTextField.setMinimumSize(new java.awt.Dimension(30, 30));
        phonegapBrowseTextField.setName("phonegapBrowseTextField"); // NOI18N
        phonegapBrowseTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                phonegapBrowseTextFieldKeyReleased(evt);
            }
        });
        browsePanel.add(phonegapBrowseTextField, java.awt.BorderLayout.CENTER);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(SetupPhonegapPanel.class, this);
        phonegapBrowseButton.setAction(actionMap.get("browsePhonegapPath")); // NOI18N
        phonegapBrowseButton.setIcon(resourceMap.getIcon("phonegapBrowseButton.icon")); // NOI18N
        phonegapBrowseButton.setText(resourceMap.getString("phonegapBrowseButton.text")); // NOI18N
        phonegapBrowseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
        phonegapBrowseButton.setBorderPainted(false);
        phonegapBrowseButton.setContentAreaFilled(false);
        phonegapBrowseButton.setFocusPainted(false);
        phonegapBrowseButton.setName("phonegapBrowseButton"); // NOI18N
        phonegapBrowseButton.setPressedIcon(resourceMap.getIcon("phonegapBrowseButton.pressedIcon")); // NOI18N
        phonegapBrowseButton.setRolloverIcon(resourceMap.getIcon("phonegapBrowseButton.rolloverIcon")); // NOI18N
        browsePanel.add(phonegapBrowseButton, java.awt.BorderLayout.LINE_END);

        phonegapBrowseLabel.setText(resourceMap.getString("phonegapBrowseLabel.text")); // NOI18N
        phonegapBrowseLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        phonegapBrowseLabel.setName("phonegapBrowseLabel"); // NOI18N
        browsePanel.add(phonegapBrowseLabel, java.awt.BorderLayout.PAGE_START);

        phonegapMainPanel.add(browsePanel, java.awt.BorderLayout.PAGE_END);

        add(phonegapMainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextPane2testHyperlinkListener(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_jTextPane2testHyperlinkListener
      if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        Desktop desktop = Desktop.getDesktop();
        if (desktop.isSupported(Desktop.Action.BROWSE)) {
          try {
            System.out.println("Got a link event! " + evt.getDescription());
            desktop.browse(new URI(evt.getDescription()));
          } catch (IOException ex) {
            Logger.getLogger(SetupView.class.getName()).log(Level.SEVERE, null, ex);
          } catch (URISyntaxException ex) {
            Logger.getLogger(SetupView.class.getName()).log(Level.SEVERE, null, ex);
          }
        }
      }
}//GEN-LAST:event_jTextPane2testHyperlinkListener

    private void phonegapBrowseTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phonegapBrowseTextFieldKeyReleased
      firePanelChanged();
    }//GEN-LAST:event_phonegapBrowseTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel browsePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JButton phonegapBrowseButton;
    private javax.swing.JLabel phonegapBrowseLabel;
    private javax.swing.JTextField phonegapBrowseTextField;
    private javax.swing.JPanel phonegapMainPanel;
    private javax.swing.JPanel phonegapTopPanel;
    // End of variables declaration//GEN-END:variables
}
