/* License (MIT)
 * Copyright 2009 Sony Ericsson Mobile Communications AB
 * website: http://developer.sonyericsson.com/
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * Software), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.sonyericsson.web.sdk.view;

import java.awt.Desktop;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.event.HyperlinkEvent;
import org.jdesktop.application.Action;

public class SetupPluginPanel extends AbstractPanel {

  /** Creates new form setupPluginPanel */
  public SetupPluginPanel() {
    initComponents();

    addComponentListener(new ComponentAdapter() {

      @Override
      public void componentShown(ComponentEvent e) {
        System.out.println("downloadPanel.componentShown");
        firePanelChanged();

      }

      @Override
      public void componentHidden(ComponentEvent e) {
      }
    });
  }

  public boolean isNextEnabled() {
    if (pluginDownloadCheckBox.isSelected()) {
      return new File(pluginBrowseTextField.getText() + "\\plugins").isDirectory();
    }
    return true;
  }

  @Action
  public void browseEclipsePath() {
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File selectedFolder = chooser.getSelectedFile();
      pluginBrowseTextField.setText(selectedFolder.getPath());
    }
    firePanelChanged();
  }
  
  public String getEclipsePath(){
      return pluginBrowseTextField.getText();
  }
  
  public boolean shouldPluginBeInstalled(){
      return pluginDownloadCheckBox.isSelected();
  }


  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    pluginTopPanel = new javax.swing.JPanel();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    pluginMainPanel = new javax.swing.JPanel();
    pluginBrowsePanel = new javax.swing.JPanel();
    pluginBrowseTextField = new javax.swing.JTextField();
    pluginBrowseButton = new javax.swing.JButton();
    pluginBrowseLabel = new javax.swing.JLabel();
    pluginDownloadCheckBox = new javax.swing.JCheckBox();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextPane1 = new javax.swing.JTextPane();

    setName("Form"); // NOI18N
    setOpaque(false);
    setLayout(new java.awt.BorderLayout());

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.sonyericsson.web.sdk.controller.WebSDK.class).getContext().getResourceMap(SetupPluginPanel.class);
    pluginTopPanel.setBackground(resourceMap.getColor("pluginTopPanel.background")); // NOI18N
    pluginTopPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    pluginTopPanel.setName("pluginTopPanel"); // NOI18N
    pluginTopPanel.setOpaque(false);
    pluginTopPanel.setPreferredSize(new java.awt.Dimension(90, 90));
    pluginTopPanel.setRequestFocusEnabled(false);
    pluginTopPanel.setLayout(new java.awt.BorderLayout());

    jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
    jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
    jLabel4.setName("jLabel4"); // NOI18N
    pluginTopPanel.add(jLabel4, java.awt.BorderLayout.LINE_START);

    jLabel5.setIcon(resourceMap.getIcon("jLabel5.icon")); // NOI18N
    jLabel5.setName("jLabel5"); // NOI18N
    pluginTopPanel.add(jLabel5, java.awt.BorderLayout.LINE_END);

    add(pluginTopPanel, java.awt.BorderLayout.PAGE_START);

    pluginMainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    pluginMainPanel.setName("pluginMainPanel"); // NOI18N
    pluginMainPanel.setOpaque(false);
    pluginMainPanel.setLayout(new java.awt.BorderLayout());

    pluginBrowsePanel.setName("pluginBrowsePanel"); // NOI18N
    pluginBrowsePanel.setOpaque(false);
    pluginBrowsePanel.setLayout(new java.awt.BorderLayout());

    pluginBrowseTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    pluginBrowseTextField.setEnabled(false);
    pluginBrowseTextField.setMargin(new java.awt.Insets(0, 0, 0, 0));
    pluginBrowseTextField.setMinimumSize(new java.awt.Dimension(30, 30));
    pluginBrowseTextField.setName("pluginBrowseTextField"); // NOI18N
    pluginBrowseTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        pluginBrowseTextFieldKeyReleased(evt);
      }
    });
    pluginBrowsePanel.add(pluginBrowseTextField, java.awt.BorderLayout.CENTER);

    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.sonyericsson.web.sdk.controller.WebSDK.class).getContext().getActionMap(SetupPluginPanel.class, this);
    pluginBrowseButton.setAction(actionMap.get("browseEclipsePath")); // NOI18N
    pluginBrowseButton.setIcon(resourceMap.getIcon("pluginBrowseButton.icon")); // NOI18N
    pluginBrowseButton.setText(resourceMap.getString("pluginBrowseButton.text")); // NOI18N
    pluginBrowseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
    pluginBrowseButton.setBorderPainted(false);
    pluginBrowseButton.setContentAreaFilled(false);
    pluginBrowseButton.setFocusPainted(false);
    pluginBrowseButton.setName("pluginBrowseButton"); // NOI18N
    pluginBrowseButton.setPressedIcon(resourceMap.getIcon("pluginBrowseButton.pressedIcon")); // NOI18N
    pluginBrowseButton.setRolloverIcon(resourceMap.getIcon("pluginBrowseButton.rolloverIcon")); // NOI18N
    pluginBrowsePanel.add(pluginBrowseButton, java.awt.BorderLayout.LINE_END);

    pluginBrowseLabel.setText(resourceMap.getString("pluginBrowseLabel.text")); // NOI18N
    pluginBrowseLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
    pluginBrowseLabel.setName("pluginBrowseLabel"); // NOI18N
    pluginBrowsePanel.add(pluginBrowseLabel, java.awt.BorderLayout.PAGE_START);

    pluginMainPanel.add(pluginBrowsePanel, java.awt.BorderLayout.PAGE_END);

    pluginDownloadCheckBox.setText(resourceMap.getString("pluginDownloadCheckBox.text")); // NOI18N
    pluginDownloadCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 10, 0));
    pluginDownloadCheckBox.setName("pluginDownloadCheckBox"); // NOI18N
    pluginDownloadCheckBox.setOpaque(false);
    pluginDownloadCheckBox.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        pluginDownloadCheckBoxItemStateChanged(evt);
      }
    });
    pluginMainPanel.add(pluginDownloadCheckBox, java.awt.BorderLayout.PAGE_START);

    jScrollPane1.setBackground(resourceMap.getColor("jScrollPane1.background")); // NOI18N
    jScrollPane1.setBorder(null);
    jScrollPane1.setName("jScrollPane1"); // NOI18N
    jScrollPane1.setOpaque(false);

    jTextPane1.setBackground(resourceMap.getColor("jTextPane1.background")); // NOI18N
    jTextPane1.setBorder(null);
    jTextPane1.setContentType(resourceMap.getString("jTextPane1.contentType")); // NOI18N
    jTextPane1.setEditable(false);
    jTextPane1.setText(resourceMap.getString("jTextPane1.text")); // NOI18N
    jTextPane1.setFocusable(false);
    jTextPane1.setName("jTextPane1"); // NOI18N
    jTextPane1.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
      public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
        jTextPane1testHyperlinkListener(evt);
      }
    });
    jScrollPane1.setViewportView(jTextPane1);

    pluginMainPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    add(pluginMainPanel, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

  private void pluginDownloadCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pluginDownloadCheckBoxItemStateChanged
    pluginBrowseTextField.setEnabled(pluginDownloadCheckBox.isSelected());
    pluginBrowseButton.setEnabled(pluginDownloadCheckBox.isSelected());
    firePanelChanged();
  }//GEN-LAST:event_pluginDownloadCheckBoxItemStateChanged

  private void pluginBrowseTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pluginBrowseTextFieldKeyReleased
    firePanelChanged();
  }//GEN-LAST:event_pluginBrowseTextFieldKeyReleased

  private void jTextPane1testHyperlinkListener(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_jTextPane1testHyperlinkListener
    if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
      Desktop desktop = Desktop.getDesktop();
      if (desktop.isSupported(Desktop.Action.BROWSE)) {
        try {
          System.out.println("Got a link event! " + evt.getDescription());
          desktop.browse(new URI(evt.getDescription()));
        } catch (IOException ex) {
          Logger.getLogger(SetupView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (URISyntaxException ex) {
          Logger.getLogger(SetupView.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }
}//GEN-LAST:event_jTextPane1testHyperlinkListener

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextPane jTextPane1;
  private javax.swing.JButton pluginBrowseButton;
  private javax.swing.JLabel pluginBrowseLabel;
  private javax.swing.JPanel pluginBrowsePanel;
  private javax.swing.JTextField pluginBrowseTextField;
  private javax.swing.JCheckBox pluginDownloadCheckBox;
  private javax.swing.JPanel pluginMainPanel;
  private javax.swing.JPanel pluginTopPanel;
  // End of variables declaration//GEN-END:variables

}
