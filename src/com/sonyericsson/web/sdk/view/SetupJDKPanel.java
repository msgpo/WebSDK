/* License (MIT)
 * Copyright 2009 Sony Ericsson Mobile Communications AB
 * website: http://developer.sonyericsson.com/
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * Software), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.sonyericsson.web.sdk.view;

import com.sonyericsson.web.sdk.model.Settings;
import java.awt.Desktop;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.event.HyperlinkEvent;
import org.jdesktop.application.Action;

public class SetupJDKPanel extends AbstractPanel {

  /** Creates new form setupJDKPanel */
  public SetupJDKPanel(Settings settings) {
    initComponents();
    jdkBrowseTextField.setText(settings.getJDKPath());
    
    addComponentListener(new ComponentAdapter() {

      @Override
      public void componentShown(ComponentEvent e) {
        System.out.println("downloadPanel.componentShown");
        firePanelChanged();

      }

      @Override
      public void componentHidden(ComponentEvent e) {
      }
    });
  }

  @Override
  public boolean isNextEnabled() {
    File jdkToolJar = new File(jdkBrowseTextField.getText() + "//lib//tools.jar");
    return jdkToolJar.exists();
  }

  @Action
  public void browseJDKPath() {
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File selectedFolder = chooser.getSelectedFile();
      jdkBrowseTextField.setText(selectedFolder.getPath());
    }
    firePanelChanged();
  }

  public String getPath() {
    return jdkBrowseTextField.getText();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jdkTopPanel = new javax.swing.JPanel();
    jLabel7 = new javax.swing.JLabel();
    jLabel8 = new javax.swing.JLabel();
    jdkMainPanel = new javax.swing.JPanel();
    jdkBrowsePanel = new javax.swing.JPanel();
    jdkBrowseTextField = new javax.swing.JTextField();
    jdkBrowseButton = new javax.swing.JButton();
    jdkBrowseLabel = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextPane1 = new javax.swing.JTextPane();

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.sonyericsson.web.sdk.controller.WebSDK.class).getContext().getResourceMap(SetupJDKPanel.class);
    setBackground(resourceMap.getColor("Form.background")); // NOI18N
    setName("Form"); // NOI18N
    setOpaque(false);
    setLayout(new java.awt.BorderLayout());

    jdkTopPanel.setBackground(resourceMap.getColor("jdkTopPanel.background")); // NOI18N
    jdkTopPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    jdkTopPanel.setName("jdkTopPanel"); // NOI18N
    jdkTopPanel.setOpaque(false);
    jdkTopPanel.setPreferredSize(new java.awt.Dimension(90, 90));
    jdkTopPanel.setLayout(new java.awt.BorderLayout());

    jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
    jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
    jLabel7.setName("jLabel7"); // NOI18N
    jdkTopPanel.add(jLabel7, java.awt.BorderLayout.LINE_START);

    jLabel8.setIcon(resourceMap.getIcon("jLabel8.icon")); // NOI18N
    jLabel8.setName("jLabel8"); // NOI18N
    jdkTopPanel.add(jLabel8, java.awt.BorderLayout.LINE_END);

    add(jdkTopPanel, java.awt.BorderLayout.PAGE_START);

    jdkMainPanel.setBackground(resourceMap.getColor("jdkMainPanel.background")); // NOI18N
    jdkMainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    jdkMainPanel.setName("jdkMainPanel"); // NOI18N
    jdkMainPanel.setLayout(new java.awt.BorderLayout());

    jdkBrowsePanel.setName("jdkBrowsePanel"); // NOI18N
    jdkBrowsePanel.setOpaque(false);
    jdkBrowsePanel.setLayout(new java.awt.BorderLayout());

    jdkBrowseTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jdkBrowseTextField.setMargin(new java.awt.Insets(0, 0, 0, 0));
    jdkBrowseTextField.setName("jdkBrowseTextField"); // NOI18N
    jdkBrowseTextField.setPreferredSize(new java.awt.Dimension(30, 30));
    jdkBrowseTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        jdkBrowseTextFieldKeyReleased(evt);
      }
    });
    jdkBrowsePanel.add(jdkBrowseTextField, java.awt.BorderLayout.CENTER);

    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.sonyericsson.web.sdk.controller.WebSDK.class).getContext().getActionMap(SetupJDKPanel.class, this);
    jdkBrowseButton.setAction(actionMap.get("browseJDKPath")); // NOI18N
    jdkBrowseButton.setIcon(resourceMap.getIcon("jdkBrowseButton.icon")); // NOI18N
    jdkBrowseButton.setText(resourceMap.getString("jdkBrowseButton.text")); // NOI18N
    jdkBrowseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
    jdkBrowseButton.setBorderPainted(false);
    jdkBrowseButton.setContentAreaFilled(false);
    jdkBrowseButton.setFocusPainted(false);
    jdkBrowseButton.setName("jdkBrowseButton"); // NOI18N
    jdkBrowseButton.setPressedIcon(resourceMap.getIcon("jdkBrowseButton.pressedIcon")); // NOI18N
    jdkBrowseButton.setRolloverIcon(resourceMap.getIcon("jdkBrowseButton.rolloverIcon")); // NOI18N
    jdkBrowsePanel.add(jdkBrowseButton, java.awt.BorderLayout.LINE_END);

    jdkBrowseLabel.setText(resourceMap.getString("jdkBrowseLabel.text")); // NOI18N
    jdkBrowseLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
    jdkBrowseLabel.setName("jdkBrowseLabel"); // NOI18N
    jdkBrowsePanel.add(jdkBrowseLabel, java.awt.BorderLayout.PAGE_START);

    jdkMainPanel.add(jdkBrowsePanel, java.awt.BorderLayout.PAGE_END);

    jScrollPane1.setBackground(resourceMap.getColor("jScrollPane1.background")); // NOI18N
    jScrollPane1.setBorder(null);
    jScrollPane1.setName("jScrollPane1"); // NOI18N
    jScrollPane1.setOpaque(false);

    jTextPane1.setBackground(resourceMap.getColor("jTextPane1.background")); // NOI18N
    jTextPane1.setBorder(null);
    jTextPane1.setContentType(resourceMap.getString("jTextPane1.contentType")); // NOI18N
    jTextPane1.setEditable(false);
    jTextPane1.setText(resourceMap.getString("jTextPane1.text")); // NOI18N
    jTextPane1.setFocusable(false);
    jTextPane1.setName("jTextPane1"); // NOI18N
    jTextPane1.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
      public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
        jTextPane1testHyperlinkListener(evt);
      }
    });
    jScrollPane1.setViewportView(jTextPane1);

    jdkMainPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    add(jdkMainPanel, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

    private void jTextPane1testHyperlinkListener(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_jTextPane1testHyperlinkListener
      if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        Desktop desktop = Desktop.getDesktop();
        if (desktop.isSupported(Desktop.Action.BROWSE)) {
          try {
            System.out.println("Got a link event! " + evt.getDescription());
            desktop.browse(new URI(evt.getDescription()));
          } catch (IOException ex) {
            Logger.getLogger(SetupView.class.getName()).log(Level.SEVERE, null, ex);
          } catch (URISyntaxException ex) {
            Logger.getLogger(SetupView.class.getName()).log(Level.SEVERE, null, ex);
          }
        }
      }
}//GEN-LAST:event_jTextPane1testHyperlinkListener

    private void jdkBrowseTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jdkBrowseTextFieldKeyReleased
      firePanelChanged();
    }//GEN-LAST:event_jdkBrowseTextFieldKeyReleased

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextPane jTextPane1;
  private javax.swing.JButton jdkBrowseButton;
  private javax.swing.JLabel jdkBrowseLabel;
  private javax.swing.JPanel jdkBrowsePanel;
  private javax.swing.JTextField jdkBrowseTextField;
  private javax.swing.JPanel jdkMainPanel;
  private javax.swing.JPanel jdkTopPanel;
  // End of variables declaration//GEN-END:variables
}
