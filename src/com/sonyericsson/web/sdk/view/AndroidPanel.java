/* License (MIT)
 * Copyright 2009 Sony Ericsson Mobile Communications AB
 * website: http://developer.sonyericsson.com/
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * Software), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.sonyericsson.web.sdk.view;

import com.sonyericsson.web.sdk.model.AndroidKeys;
import com.sonyericsson.web.sdk.model.Settings;
import com.sonyericsson.web.sdk.model.Targets;
import com.sonyericsson.web.sdk.utils.Logger;
import com.sonyericsson.web.sdk.utils.RegistryHandler;
import com.sonyericsson.web.sdk.view.dialog.DialogListener;
import java.awt.Color;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.jdesktop.application.Action;

public class AndroidPanel extends AbstractPanel implements DialogListener, TableModelListener {

  private String sdkPath = "";
  private String jdkPath = "";
  private String projectPath = "";
  private Targets targets;
  private AndroidKeys androidKeys;
  private String keystoreLocation;
  private PromptDialog passwordDialog;
  private JFrame parent;
  private boolean jdkToolsExists;
  private boolean projectExists;
  private boolean sdkToolsExists;
  private PanelListener listener;
  private boolean targetsOk;
  Settings settings;

  /** Creates new form AndroidPanel */
  public AndroidPanel(JFrame parent, Settings settings, PanelListener listener) {
    this.parent = parent;
    this.listener = listener;
    this.settings = settings;
    sdkPath = settings.getAndroidSDKPath();
    jdkPath = settings.getJDKPath();
    projectPath = settings.getProjectPath();
    if(projectPath.equals("") || projectPath == null)
    {
        projectPath = settings.getInstallDirectory()+"/PhonegapSDK/Default/Android";
    }
    targets = settings.getTargets();
    androidKeys = settings.getAndroidKeys();
    keystoreLocation = androidKeys.getKeystoreLocation();

    initComponents();

    sdkTextField.setText(sdkPath);
    if(!isToolsAvailable())
    {
        jdkTextField.setText(jdkPath);
        jdkPanel.setEnabled(true);
        jdkTextField.setEnabled(true);
        jdkBrowseButton.setVisible(true);
    }
    else
    {
        jdkTextField.setText("Located");
        jdkPanel.setEnabled(false);
        jdkTextField.setEnabled(false);
        jdkBrowseButton.setVisible(false);
    }

    projectTextField.setText(projectPath);
    keystoreTextField.setText(keystoreLocation);

    checkAndroidSDK();
    checkJDK();
    checkProject();
    checkTargets();
    targets.addTableModelListener(this);
    targetTable.setModel(targets);
    androidKeysTable.setModel(androidKeys);
    setSigning(settings.getSigning());

  }

    private boolean isKeystoreLocationValid() {
        boolean valid = false;
        if (!androidKeys.isLoaded() && (androidKeys.getKeystoreLocation() != null) && !androidKeys.getKeystoreLocation().equals("")) {
            valid = true;
        }
        return valid;
    }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        signingGroup = new javax.swing.ButtonGroup();
        androidTabbedPane = new javax.swing.JTabbedPane();
        androidGeneralPanel = new javax.swing.JPanel();
        pathsPanel = new javax.swing.JPanel();
        sdkPanel = new javax.swing.JPanel();
        sdkTopPanel = new javax.swing.JPanel();
        sdkPathLabel = new javax.swing.JLabel();
        sdkTextField = new javax.swing.JTextField();
        sdkBrowseButton = new javax.swing.JButton();
        jdkPanel = new javax.swing.JPanel();
        jdkTopPanel = new javax.swing.JPanel();
        jdkPathLabel = new javax.swing.JLabel();
        jdkTextField = new javax.swing.JTextField();
        jdkBrowseButton = new javax.swing.JButton();
        projectPanel = new javax.swing.JPanel();
        projectTopPanel = new javax.swing.JPanel();
        projectPathLabel = new javax.swing.JLabel();
        projectTextField = new javax.swing.JTextField();
        projectBrowseButton = new javax.swing.JButton();
        androidSDKPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        androidSDKButton = new javax.swing.JButton();
        targetsPanel = new javax.swing.JPanel();
        targetPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        targetScrollPane = new javax.swing.JScrollPane();
        targetTable = new javax.swing.JTable();
        targetLabel = new javax.swing.JLabel();
        signingPanel = new javax.swing.JPanel();
        singingMenuPanel = new javax.swing.JPanel();
        debugRadioButton = new javax.swing.JRadioButton();
        unsignedReleaseRadioButton = new javax.swing.JRadioButton();
        signedReleaseRadioButton = new javax.swing.JRadioButton();
        keyStorePanel = new javax.swing.JPanel();
        keyStoreScrollPane = new javax.swing.JScrollPane();
        androidKeysTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        keystoreTextField = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        keystoreBrowseButton = new javax.swing.JButton();
        keystoreLoadButton = new javax.swing.JButton();

        setName("Form"); // NOI18N
        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(AndroidPanel.class);
        androidTabbedPane.setBackground(resourceMap.getColor("androidTabbedPane.background")); // NOI18N
        androidTabbedPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 10, 0));
        androidTabbedPane.setToolTipText(resourceMap.getString("androidTabbedPane.toolTipText")); // NOI18N
        androidTabbedPane.setFont(resourceMap.getFont("androidTabbedPane.font")); // NOI18N
        androidTabbedPane.setName("androidTabbedPane"); // NOI18N
        androidTabbedPane.setPreferredSize(new java.awt.Dimension(542, 300));

        androidGeneralPanel.setName("androidGeneralPanel"); // NOI18N
        androidGeneralPanel.setOpaque(false);
        androidGeneralPanel.setLayout(new java.awt.BorderLayout());

        pathsPanel.setName("pathsPanel"); // NOI18N
        pathsPanel.setOpaque(false);
        pathsPanel.setLayout(new javax.swing.BoxLayout(pathsPanel, javax.swing.BoxLayout.PAGE_AXIS));

        sdkPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        sdkPanel.setName("sdkPanel"); // NOI18N
        sdkPanel.setOpaque(false);
        sdkPanel.setLayout(new java.awt.BorderLayout());

        sdkTopPanel.setName("sdkTopPanel"); // NOI18N
        sdkTopPanel.setOpaque(false);
        sdkTopPanel.setLayout(new java.awt.BorderLayout());

        sdkPathLabel.setFont(resourceMap.getFont("jdkPathLabel.font")); // NOI18N
        sdkPathLabel.setForeground(resourceMap.getColor("jdkPathLabel.foreground")); // NOI18N
        sdkPathLabel.setText(resourceMap.getString("sdkPathLabel.text")); // NOI18N
        sdkPathLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        sdkPathLabel.setName("sdkPathLabel"); // NOI18N
        sdkTopPanel.add(sdkPathLabel, java.awt.BorderLayout.LINE_START);

        sdkPanel.add(sdkTopPanel, java.awt.BorderLayout.PAGE_START);

        sdkTextField.setToolTipText(resourceMap.getString("sdkTextField.toolTipText")); // NOI18N
        sdkTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        sdkTextField.setMargin(new java.awt.Insets(0, 0, 0, 0));
        sdkTextField.setName("sdkTextField"); // NOI18N
        sdkTextField.setPreferredSize(new java.awt.Dimension(30, 30));
        sdkTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sdkTextFieldKeyReleased(evt);
            }
        });
        sdkPanel.add(sdkTextField, java.awt.BorderLayout.CENTER);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(AndroidPanel.class, this);
        sdkBrowseButton.setAction(actionMap.get("browseAndroidPath")); // NOI18N
        sdkBrowseButton.setIcon(resourceMap.getIcon("sdkBrowseButton.icon")); // NOI18N
        sdkBrowseButton.setText(resourceMap.getString("sdkBrowseButton.text")); // NOI18N
        sdkBrowseButton.setToolTipText(resourceMap.getString("sdkBrowseButton.toolTipText")); // NOI18N
        sdkBrowseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
        sdkBrowseButton.setBorderPainted(false);
        sdkBrowseButton.setContentAreaFilled(false);
        sdkBrowseButton.setFocusPainted(false);
        sdkBrowseButton.setName("sdkBrowseButton"); // NOI18N
        sdkBrowseButton.setPressedIcon(resourceMap.getIcon("sdkBrowseButton.pressedIcon")); // NOI18N
        sdkBrowseButton.setRolloverIcon(resourceMap.getIcon("sdkBrowseButton.rolloverIcon")); // NOI18N
        sdkPanel.add(sdkBrowseButton, java.awt.BorderLayout.LINE_END);

        pathsPanel.add(sdkPanel);

        jdkPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jdkPanel.setName("jdkPanel"); // NOI18N
        jdkPanel.setOpaque(false);
        jdkPanel.setLayout(new java.awt.BorderLayout());

        jdkTopPanel.setName("jdkTopPanel"); // NOI18N
        jdkTopPanel.setOpaque(false);
        jdkTopPanel.setLayout(new java.awt.BorderLayout());

        jdkPathLabel.setFont(resourceMap.getFont("jdkPathLabel.font")); // NOI18N
        jdkPathLabel.setForeground(resourceMap.getColor("jdkPathLabel.foreground")); // NOI18N
        jdkPathLabel.setText(resourceMap.getString("jdkPathLabel.text")); // NOI18N
        jdkPathLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jdkPathLabel.setName("jdkPathLabel"); // NOI18N
        jdkTopPanel.add(jdkPathLabel, java.awt.BorderLayout.LINE_START);

        jdkPanel.add(jdkTopPanel, java.awt.BorderLayout.PAGE_START);

        jdkTextField.setToolTipText(resourceMap.getString("jdkTextField.toolTipText")); // NOI18N
        jdkTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jdkTextField.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jdkTextField.setName("jdkTextField"); // NOI18N
        jdkTextField.setPreferredSize(new java.awt.Dimension(30, 30));
        jdkTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jdkTextFieldKeyReleased(evt);
            }
        });
        jdkPanel.add(jdkTextField, java.awt.BorderLayout.CENTER);

        jdkBrowseButton.setAction(actionMap.get("browseJDKPath")); // NOI18N
        jdkBrowseButton.setIcon(resourceMap.getIcon("jdkBrowseButton.icon")); // NOI18N
        jdkBrowseButton.setText(resourceMap.getString("jdkBrowseButton.text")); // NOI18N
        jdkBrowseButton.setToolTipText(resourceMap.getString("jdkBrowseButton.toolTipText")); // NOI18N
        jdkBrowseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
        jdkBrowseButton.setBorderPainted(false);
        jdkBrowseButton.setContentAreaFilled(false);
        jdkBrowseButton.setFocusPainted(false);
        jdkBrowseButton.setName("jdkBrowseButton"); // NOI18N
        jdkBrowseButton.setPressedIcon(resourceMap.getIcon("jdkBrowseButton.pressedIcon")); // NOI18N
        jdkBrowseButton.setRolloverIcon(resourceMap.getIcon("jdkBrowseButton.rolloverIcon")); // NOI18N
        jdkPanel.add(jdkBrowseButton, java.awt.BorderLayout.LINE_END);

        pathsPanel.add(jdkPanel);

        projectPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        projectPanel.setName("projectPanel"); // NOI18N
        projectPanel.setOpaque(false);
        projectPanel.setLayout(new java.awt.BorderLayout());

        projectTopPanel.setName("projectTopPanel"); // NOI18N
        projectTopPanel.setOpaque(false);
        projectTopPanel.setLayout(new java.awt.BorderLayout());

        projectPathLabel.setFont(resourceMap.getFont("projectPathLabel.font")); // NOI18N
        projectPathLabel.setForeground(resourceMap.getColor("projectPathLabel.foreground")); // NOI18N
        projectPathLabel.setText(resourceMap.getString("projectPathLabel.text")); // NOI18N
        projectPathLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        projectPathLabel.setName("projectPathLabel"); // NOI18N
        projectTopPanel.add(projectPathLabel, java.awt.BorderLayout.LINE_START);

        projectPanel.add(projectTopPanel, java.awt.BorderLayout.PAGE_START);

        projectTextField.setToolTipText(resourceMap.getString("projectTextField.toolTipText")); // NOI18N
        projectTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        projectTextField.setMargin(new java.awt.Insets(0, 0, 0, 0));
        projectTextField.setName("projectTextField"); // NOI18N
        projectTextField.setPreferredSize(new java.awt.Dimension(30, 30));
        projectTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                projectTextFieldKeyReleased(evt);
            }
        });
        projectPanel.add(projectTextField, java.awt.BorderLayout.CENTER);

        projectBrowseButton.setAction(actionMap.get("browseProjectPath")); // NOI18N
        projectBrowseButton.setIcon(resourceMap.getIcon("projectBrowseButton.icon")); // NOI18N
        projectBrowseButton.setToolTipText(resourceMap.getString("projectBrowseButton.toolTipText")); // NOI18N
        projectBrowseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
        projectBrowseButton.setBorderPainted(false);
        projectBrowseButton.setContentAreaFilled(false);
        projectBrowseButton.setFocusPainted(false);
        projectBrowseButton.setName("projectBrowseButton"); // NOI18N
        projectBrowseButton.setPressedIcon(resourceMap.getIcon("projectBrowseButton.pressedIcon")); // NOI18N
        projectBrowseButton.setRolloverIcon(resourceMap.getIcon("projectBrowseButton.rolloverIcon")); // NOI18N
        projectPanel.add(projectBrowseButton, java.awt.BorderLayout.LINE_END);

        pathsPanel.add(projectPanel);

        androidGeneralPanel.add(pathsPanel, java.awt.BorderLayout.PAGE_START);

        androidSDKPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        androidSDKPanel.setName("androidSDKPanel"); // NOI18N
        androidSDKPanel.setOpaque(false);
        androidSDKPanel.setLayout(new javax.swing.BoxLayout(androidSDKPanel, javax.swing.BoxLayout.PAGE_AXIS));

        jSeparator1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
        jSeparator1.setMaximumSize(new java.awt.Dimension(32767, 2));
        jSeparator1.setName("jSeparator1"); // NOI18N
        androidSDKPanel.add(jSeparator1);

        androidSDKButton.setAction(actionMap.get("startAndroidSDK")); // NOI18N
        androidSDKButton.setFont(resourceMap.getFont("androidSDKButton.font")); // NOI18N
        androidSDKButton.setForeground(resourceMap.getColor("androidSDKButton.foreground")); // NOI18N
        androidSDKButton.setIcon(resourceMap.getIcon("androidSDKButton.icon")); // NOI18N
        androidSDKButton.setText(resourceMap.getString("androidSDKButton.text")); // NOI18N
        androidSDKButton.setBorder(null);
        androidSDKButton.setBorderPainted(false);
        androidSDKButton.setContentAreaFilled(false);
        androidSDKButton.setFocusPainted(false);
        androidSDKButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        androidSDKButton.setName("androidSDKButton"); // NOI18N
        androidSDKButton.setPressedIcon(resourceMap.getIcon("androidSDKButton.pressedIcon")); // NOI18N
        androidSDKButton.setRolloverIcon(resourceMap.getIcon("androidSDKButton.rolloverIcon")); // NOI18N
        androidSDKPanel.add(androidSDKButton);

        androidGeneralPanel.add(androidSDKPanel, java.awt.BorderLayout.CENTER);

        androidTabbedPane.addTab(resourceMap.getString("androidGeneralPanel.TabConstraints.tabTitle"), androidGeneralPanel); // NOI18N

        targetsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        targetsPanel.setName("targetsPanel"); // NOI18N
        targetsPanel.setOpaque(false);
        targetsPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                targetsPanelFocusGained(evt);
            }
        });
        targetsPanel.setLayout(new java.awt.BorderLayout());

        targetPanel.setName("targetPanel"); // NOI18N
        targetPanel.setOpaque(false);
        targetPanel.setLayout(new java.awt.BorderLayout());

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.BorderLayout());

        jButton3.setAction(actionMap.get("refreshTargets")); // NOI18N
        jButton3.setIcon(resourceMap.getIcon("jButton3.icon")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setToolTipText(resourceMap.getString("jButton3.toolTipText")); // NOI18N
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setFocusPainted(false);
        jButton3.setName("jButton3"); // NOI18N
        jButton3.setPressedIcon(resourceMap.getIcon("jButton3.pressedIcon")); // NOI18N
        jButton3.setRolloverIcon(resourceMap.getIcon("jButton3.rolloverIcon")); // NOI18N
        jPanel3.add(jButton3, java.awt.BorderLayout.PAGE_START);

        targetPanel.add(jPanel3, java.awt.BorderLayout.LINE_END);

        targetScrollPane.setBackground(resourceMap.getColor("targetScrollPane.background")); // NOI18N
        targetScrollPane.setName("targetScrollPane"); // NOI18N
        targetScrollPane.setOpaque(false);

        targetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Selected", "id", "Name", "API Level"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        targetTable.setToolTipText(resourceMap.getString("targetTable.toolTipText")); // NOI18N
        targetTable.setName("targetTable"); // NOI18N
        targetScrollPane.setViewportView(targetTable);
        targetTable.getColumnModel().getColumn(0).setMinWidth(20);
        targetTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        targetTable.getColumnModel().getColumn(0).setMaxWidth(60);

        targetPanel.add(targetScrollPane, java.awt.BorderLayout.CENTER);

        targetLabel.setFont(resourceMap.getFont("targetLabel.font")); // NOI18N
        targetLabel.setForeground(resourceMap.getColor("targetLabel.foreground")); // NOI18N
        targetLabel.setText(resourceMap.getString("targetLabel.text")); // NOI18N
        targetLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        targetLabel.setName("targetLabel"); // NOI18N
        targetPanel.add(targetLabel, java.awt.BorderLayout.PAGE_START);

        targetsPanel.add(targetPanel, java.awt.BorderLayout.CENTER);

        androidTabbedPane.addTab(resourceMap.getString("targetsPanel.TabConstraints.tabTitle"), targetsPanel); // NOI18N

        signingPanel.setName("signingPanel"); // NOI18N
        signingPanel.setOpaque(false);
        signingPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                signingPanelComponentShown(evt);
            }
        });
        signingPanel.setLayout(new java.awt.BorderLayout());

        singingMenuPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        singingMenuPanel.setName("singingMenuPanel"); // NOI18N
        singingMenuPanel.setOpaque(false);
        singingMenuPanel.setLayout(new javax.swing.BoxLayout(singingMenuPanel, javax.swing.BoxLayout.Y_AXIS));

        signingGroup.add(debugRadioButton);
        debugRadioButton.setFont(resourceMap.getFont("unsignedReleaseRadioButton.font")); // NOI18N
        debugRadioButton.setSelected(true);
        debugRadioButton.setText(resourceMap.getString("debugRadioButton.text")); // NOI18N
        debugRadioButton.setToolTipText(resourceMap.getString("debugRadioButton.toolTipText")); // NOI18N
        debugRadioButton.setFocusPainted(false);
        debugRadioButton.setIcon(resourceMap.getIcon("debugRadioButton.icon")); // NOI18N
        debugRadioButton.setName("debugRadioButton"); // NOI18N
        debugRadioButton.setOpaque(false);
        debugRadioButton.setSelectedIcon(resourceMap.getIcon("debugRadioButton.selectedIcon")); // NOI18N
        debugRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                debugRadioButtonItemStateChanged(evt);
            }
        });
        singingMenuPanel.add(debugRadioButton);

        signingGroup.add(unsignedReleaseRadioButton);
        unsignedReleaseRadioButton.setFont(resourceMap.getFont("unsignedReleaseRadioButton.font")); // NOI18N
        unsignedReleaseRadioButton.setText(resourceMap.getString("unsignedReleaseRadioButton.text")); // NOI18N
        unsignedReleaseRadioButton.setToolTipText(resourceMap.getString("unsignedReleaseRadioButton.toolTipText")); // NOI18N
        unsignedReleaseRadioButton.setFocusPainted(false);
        unsignedReleaseRadioButton.setIcon(resourceMap.getIcon("unsignedReleaseRadioButton.icon")); // NOI18N
        unsignedReleaseRadioButton.setName("unsignedReleaseRadioButton"); // NOI18N
        unsignedReleaseRadioButton.setOpaque(false);
        unsignedReleaseRadioButton.setSelectedIcon(resourceMap.getIcon("unsignedReleaseRadioButton.selectedIcon")); // NOI18N
        unsignedReleaseRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                unsignedReleaseRadioButtonItemStateChanged(evt);
            }
        });
        singingMenuPanel.add(unsignedReleaseRadioButton);

        signingGroup.add(signedReleaseRadioButton);
        signedReleaseRadioButton.setFont(resourceMap.getFont("unsignedReleaseRadioButton.font")); // NOI18N
        signedReleaseRadioButton.setText(resourceMap.getString("signedReleaseRadioButton.text")); // NOI18N
        signedReleaseRadioButton.setToolTipText(resourceMap.getString("signedReleaseRadioButton.toolTipText")); // NOI18N
        signedReleaseRadioButton.setFocusPainted(false);
        signedReleaseRadioButton.setIcon(resourceMap.getIcon("signedReleaseRadioButton.icon")); // NOI18N
        signedReleaseRadioButton.setName("signedReleaseRadioButton"); // NOI18N
        signedReleaseRadioButton.setOpaque(false);
        signedReleaseRadioButton.setSelectedIcon(resourceMap.getIcon("signedReleaseRadioButton.selectedIcon")); // NOI18N
        signedReleaseRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                signedReleaseRadioButtonItemStateChanged(evt);
            }
        });
        singingMenuPanel.add(signedReleaseRadioButton);

        signingPanel.add(singingMenuPanel, java.awt.BorderLayout.PAGE_START);

        keyStorePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("keyStorePanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("keyStorePanel.border.titleFont"), resourceMap.getColor("keyStorePanel.border.titleColor"))); // NOI18N
        keyStorePanel.setName("keyStorePanel"); // NOI18N
        keyStorePanel.setOpaque(false);
        keyStorePanel.setLayout(new java.awt.BorderLayout());

        keyStoreScrollPane.setBorder(null);
        keyStoreScrollPane.setName("keyStoreScrollPane"); // NOI18N
        keyStoreScrollPane.setOpaque(false);

        androidKeysTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Selected", "Alias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        androidKeysTable.setToolTipText(resourceMap.getString("androidKeysTable.toolTipText")); // NOI18N
        androidKeysTable.setColumnSelectionAllowed(true);
        androidKeysTable.setName("androidKeysTable"); // NOI18N
        androidKeysTable.setOpaque(false);
        keyStoreScrollPane.setViewportView(androidKeysTable);
        androidKeysTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        androidKeysTable.getColumnModel().getColumn(0).setMinWidth(20);
        androidKeysTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        androidKeysTable.getColumnModel().getColumn(0).setMaxWidth(60);

        keyStorePanel.add(keyStoreScrollPane, java.awt.BorderLayout.CENTER);

        jPanel6.setName("jPanel6"); // NOI18N
        jPanel6.setOpaque(false);
        jPanel6.setLayout(new java.awt.BorderLayout());

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jLabel5.setName("jLabel5"); // NOI18N
        jPanel6.add(jLabel5, java.awt.BorderLayout.PAGE_START);

        keystoreTextField.setToolTipText(resourceMap.getString("keystoreTextField.toolTipText")); // NOI18N
        keystoreTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        keystoreTextField.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keystoreTextField.setName("keystoreTextField"); // NOI18N
        keystoreTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keystoreTextFieldKeyReleased(evt);
            }
        });
        jPanel6.add(keystoreTextField, java.awt.BorderLayout.CENTER);

        jPanel7.setName("jPanel7"); // NOI18N
        jPanel7.setOpaque(false);
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.LINE_AXIS));

        keystoreBrowseButton.setAction(actionMap.get("browseKeystoreLocation")); // NOI18N
        keystoreBrowseButton.setIcon(resourceMap.getIcon("keystoreBrowseButton.icon")); // NOI18N
        keystoreBrowseButton.setText(resourceMap.getString("keystoreBrowseButton.text")); // NOI18N
        keystoreBrowseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
        keystoreBrowseButton.setContentAreaFilled(false);
        keystoreBrowseButton.setFocusPainted(false);
        keystoreBrowseButton.setName("keystoreBrowseButton"); // NOI18N
        keystoreBrowseButton.setPressedIcon(resourceMap.getIcon("keystoreBrowseButton.pressedIcon")); // NOI18N
        keystoreBrowseButton.setRolloverIcon(resourceMap.getIcon("keystoreBrowseButton.rolloverIcon")); // NOI18N
        jPanel7.add(keystoreBrowseButton);

        keystoreLoadButton.setAction(actionMap.get("setKeystoreLocation")); // NOI18N
        keystoreLoadButton.setIcon(resourceMap.getIcon("keystoreLoadButton.icon")); // NOI18N
        keystoreLoadButton.setText(resourceMap.getString("keystoreLoadButton.text")); // NOI18N
        keystoreLoadButton.setBorder(null);
        keystoreLoadButton.setBorderPainted(false);
        keystoreLoadButton.setContentAreaFilled(false);
        keystoreLoadButton.setFocusPainted(false);
        keystoreLoadButton.setName("keystoreLoadButton"); // NOI18N
        keystoreLoadButton.setPressedIcon(resourceMap.getIcon("keystoreLoadButton.pressedIcon")); // NOI18N
        keystoreLoadButton.setRolloverIcon(resourceMap.getIcon("keystoreLoadButton.rolloverIcon")); // NOI18N
        jPanel7.add(keystoreLoadButton);

        jPanel6.add(jPanel7, java.awt.BorderLayout.LINE_END);

        keyStorePanel.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        signingPanel.add(keyStorePanel, java.awt.BorderLayout.CENTER);

        androidTabbedPane.addTab(resourceMap.getString("signingPanel.TabConstraints.tabTitle"), signingPanel); // NOI18N

        add(androidTabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void sdkTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sdkTextFieldKeyReleased
      sdkPath = sdkTextField.getText();
      checkAndroidSDK();
      if (listener != null) {
        listener.changed(this);
      }
}//GEN-LAST:event_sdkTextFieldKeyReleased

    private void jdkTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jdkTextFieldKeyReleased
      if(!isToolsAvailable())
      {
        jdkPath = jdkTextField.getText();
      }
      checkJDK();
      if (listener != null) {
        listener.changed(this);
      }
}//GEN-LAST:event_jdkTextFieldKeyReleased

    private void targetsPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_targetsPanelFocusGained
      Logger.print(this, "focus");
      targets.refresh();
}//GEN-LAST:event_targetsPanelFocusGained

    private void debugRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_debugRadioButtonItemStateChanged
      // TODO add your handling code here:
}//GEN-LAST:event_debugRadioButtonItemStateChanged

    private void unsignedReleaseRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_unsignedReleaseRadioButtonItemStateChanged
      // TODO add your handling code here:
}//GEN-LAST:event_unsignedReleaseRadioButtonItemStateChanged

    private void signedReleaseRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_signedReleaseRadioButtonItemStateChanged
      setKeystoreEnabled(signedReleaseRadioButton.isSelected());
        if(isKeystoreLocationValid() && signingPanel.isVisible()){
            promptPassword();
        }
}//GEN-LAST:event_signedReleaseRadioButtonItemStateChanged

    private void keystoreTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keystoreTextFieldKeyReleased
      keystoreLocation = keystoreTextField.getText();
}//GEN-LAST:event_keystoreTextFieldKeyReleased

    private void signingPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_signingPanelComponentShown
      promptPassword();
}//GEN-LAST:event_signingPanelComponentShown

    private void projectTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_projectTextFieldKeyReleased
      projectPath = projectTextField.getText();
      checkProject();
      if (listener != null) {
        listener.changed(this);
      }
    }//GEN-LAST:event_projectTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel androidGeneralPanel;
    private javax.swing.JTable androidKeysTable;
    private javax.swing.JButton androidSDKButton;
    private javax.swing.JPanel androidSDKPanel;
    private javax.swing.JTabbedPane androidTabbedPane;
    private javax.swing.JRadioButton debugRadioButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jdkBrowseButton;
    private javax.swing.JPanel jdkPanel;
    private javax.swing.JLabel jdkPathLabel;
    private javax.swing.JTextField jdkTextField;
    private javax.swing.JPanel jdkTopPanel;
    private javax.swing.JPanel keyStorePanel;
    private javax.swing.JScrollPane keyStoreScrollPane;
    private javax.swing.JButton keystoreBrowseButton;
    private javax.swing.JButton keystoreLoadButton;
    private javax.swing.JTextField keystoreTextField;
    private javax.swing.JPanel pathsPanel;
    private javax.swing.JButton projectBrowseButton;
    private javax.swing.JPanel projectPanel;
    private javax.swing.JLabel projectPathLabel;
    private javax.swing.JTextField projectTextField;
    private javax.swing.JPanel projectTopPanel;
    private javax.swing.JButton sdkBrowseButton;
    private javax.swing.JPanel sdkPanel;
    private javax.swing.JLabel sdkPathLabel;
    private javax.swing.JTextField sdkTextField;
    private javax.swing.JPanel sdkTopPanel;
    private javax.swing.JRadioButton signedReleaseRadioButton;
    private javax.swing.ButtonGroup signingGroup;
    private javax.swing.JPanel signingPanel;
    private javax.swing.JPanel singingMenuPanel;
    private javax.swing.JLabel targetLabel;
    private javax.swing.JPanel targetPanel;
    private javax.swing.JScrollPane targetScrollPane;
    private javax.swing.JTable targetTable;
    private javax.swing.JPanel targetsPanel;
    private javax.swing.JRadioButton unsignedReleaseRadioButton;
    // End of variables declaration//GEN-END:variables

  @Action
  public void browseAndroidPath() {
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
    if (sdkPath.equals("")) {
      chooser.setCurrentDirectory(new java.io.File("c:\\"));
    } else {
      chooser.setCurrentDirectory(new java.io.File(sdkPath));
    }
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File selectedFolder = chooser.getSelectedFile();
      sdkTextField.setText(selectedFolder.getPath());
      sdkPath = selectedFolder.getPath();
      checkAndroidSDK();
      if (listener != null) {
        listener.changed(this);
      }
    }
  }

  @Action
  public void browseJDKPath() {
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
    if (jdkPath.equals("")) {
      chooser.setCurrentDirectory(new java.io.File("/"));
    } else {
      chooser.setCurrentDirectory(new java.io.File(jdkPath));
    }
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File selectedFolder = chooser.getSelectedFile();
      jdkTextField.setText(selectedFolder.getPath());
      jdkPath = selectedFolder.getPath();
      checkJDK();
      if (listener != null) {
        listener.changed(this);
      }
    }
  }

  @Action
  public void browseProjectPath() {
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
    if (projectPath.equals("")) {
      chooser.setCurrentDirectory(new java.io.File("c:\\"));
    } else {
      chooser.setCurrentDirectory(new java.io.File(projectPath));
    }
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File selectedFolder = chooser.getSelectedFile();
      projectPath = selectedFolder.getPath();
      projectTextField.setText(projectPath);
      checkProject();
      if (listener != null) {
        listener.changed(this);
      }
    }
  }

  @Action
  public void refreshTargets() {
    targets.refresh();
  }

  @Action
  public void browseKeystoreLocation() {
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
    if (keystoreLocation == null || keystoreLocation.equals("")) {
      chooser.setCurrentDirectory(new java.io.File("c:\\"));
    } else {
      chooser.setCurrentDirectory(new java.io.File(keystoreLocation));
    }
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File selectedFolder = chooser.getSelectedFile();
      keystoreLocation = selectedFolder.getPath();
      keystoreTextField.setText(keystoreLocation);
      setKeystoreLocation();
      settings.setAndroidKeys(androidKeys);
    }
  }

  @Action
  public void setKeystoreLocation() {
    androidKeys.setKeystoreLocation(keystoreLocation);
    if(isKeystoreLocationValid()){
        promptPassword();
    }
  }

  private void checkAndroidSDK() {
    String sdkToolsFolder = sdkPath + "/tools/adb";
    sdkToolsExists = (new File(sdkToolsFolder).exists() || new File(sdkToolsFolder + ".exe").exists());
    if (sdkToolsExists) {
      settings.setAndroidSDKPath(sdkPath);
      sdkPathLabel.setForeground(null);
    } else {
      sdkPathLabel.setForeground(Color.RED);
    }
    androidSDKButton.setEnabled(sdkToolsExists);
  }

  private boolean isToolsAvailable() {
    boolean toolsJarAvailable = false;
    try {
        // just check whether this throws an exception
        Class.forName("com.sun.tools.javac.Main");
        toolsJarAvailable = true;
    } catch (Exception e) {
        try {
            Class.forName("sun.tools.javac.Main");
            toolsJarAvailable = true;
        } catch (Exception e2) {
            // ignore
        }
    }
    return toolsJarAvailable;
  }

  private void checkJDK() {

    if(!isToolsAvailable())
    {
      File jdkToolJar = new File(jdkPath + "/lib//tools.jar");
      jdkToolsExists = jdkToolJar.exists();
      if (jdkToolsExists) {
        settings.setJDKPath(jdkPath);
        jdkPathLabel.setForeground(null);
      } else {
        jdkPathLabel.setForeground(Color.RED);
      }
    }
    else
    {
      jdkToolsExists = true;
      jdkPathLabel.setForeground(null);
    }
  }

  private void checkProject() {
    File projectManifest = new File(projectPath + "/AndroidManifest.xml");
    projectExists = projectManifest.exists();
    if (projectExists) {
      settings.setProjectPath(projectPath);
      projectPathLabel.setForeground(null);
    } else {
      projectPathLabel.setForeground(Color.RED);
    }
  }

  private void checkTargets() {
    int chosenTarget = targets.getSelectedIndex();
    targetsOk = (chosenTarget != -1);
    if (targetsOk) {
      RegistryHandler.setAndroidTarget(chosenTarget);
      targetLabel.setForeground(null);

    } else {
      targetLabel.setForeground(Color.RED);
    }
  }

  private void promptPassword() {
    System.out.println("promptPassword");
    if (signedReleaseRadioButton.isSelected()) {
      passwordDialog = new PromptDialog(parent, "Keystore Password", "Please enter the password for the keystore", "", true);
      passwordDialog.setDialogListener(this);
      passwordDialog.setVisible(true);
    }
  }

  private void setKeystoreEnabled(boolean selected) {
    androidKeysTable.setEnabled(selected);
    keystoreTextField.setEnabled(selected);
    keystoreBrowseButton.setEnabled(selected);
    keystoreLoadButton.setEnabled(selected);
    keyStoreScrollPane.setEnabled(selected);
  }

  private void setSigning(int signingValue) {
    switch (signingValue) {
      case Settings.DEBUG:
        debugRadioButton.setSelected(true);
        return;
      case Settings.UNSIGNED:
        unsignedReleaseRadioButton.setSelected(true);
        return;
      case Settings.SIGNED:
        signedReleaseRadioButton.setSelected(true);
        return;
    }
  }

  public void ok() {
    androidKeys.setKeystorePassword(passwordDialog.getValue());
    androidKeys.reload();
  }

  public void cancel() {
    //unsignedReleaseRadioButton.setSelected(true);
  }

  public String getJDKPath() {
    return jdkTextField.getText();
  }

  public String getAndroidSDKPath() {
    return sdkTextField.getText();
  }

  public Targets getTargets() {
    return targets;
  }

  public AndroidKeys getAndroidKeys() {
    return androidKeys;
  }

  public int getSigning() {
    if (unsignedReleaseRadioButton.isSelected()) {
      return Settings.UNSIGNED;
    }
    if (signedReleaseRadioButton.isSelected()) {
      return Settings.SIGNED;
    }
    return Settings.DEBUG;
  }

  boolean isCreateable() {
    return jdkToolsExists && sdkToolsExists && (targets.getSelectedIndex() != -1) && projectExists;
  }

  boolean isInstallable() {
    return jdkToolsExists && sdkToolsExists && (targets.getSelectedIndex() != -1) && projectExists;
  }

  public void tableChanged(TableModelEvent e) {
    checkTargets();
    if (listener != null) {
      listener.changed(this);
    }
  }
}
